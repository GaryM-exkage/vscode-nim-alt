{
    "fileTypes": [
      "nim"
    ],
    "scopeName": "source.nim",
    "name": "nim",
    "patterns": [
      { "include": "#base_expression" },
      { "include": "#multi-line-comment"},
      { "include": "#compare_op" },
      { "include": "#assignment_op" },
      { "include": "#arithmetic_op" },
      { "include": "#keywords" },
      { "include": "#self" },
      { "include": "#const_vars" },
      { "include": "#function-declaration" },
      { "include": "#function-return-type" },
      { "include": "#any-method" },
      { "include": "#any-property" },
      { "include": "#pascal_case_class" }
    ],
    "repository": {
      "multi-line-comment": {
        "begin": "#\\[",
        "end": "\\]#",
        "name": "comment.line.number-sign.nim",
        "patterns":
        [{
          "include": "#multi-line-comment"
        }]
      },
      "comment": {
        "captures": {
          "1": {
            "name": "punctuation.definition.comment.number-sign.nim"
          }
        },
        "match": "(#).*$\\n?",
        "name": "comment.line.number-sign.nim"
      },
      "strings": {
        "patterns": [{
            "begin": "\"",
            "end": "\"",
            "patterns": [
              {  "name": "constant.character.escape.untitled",
                  "match": "\\."
              }
            ],
            "name": "string.quoted.double.nim"
          },
          {
            "begin": "'",
            "end": "'",
            "patterns": [
              {  "name": "constant.character.escape.untitled",
                  "match": "\\."
              }
            ],
            "name": "string.quoted.single.nim"
          },
          {
            "begin": "@\"",
            "end": "\"",
            "patterns": [
              {  "name": "constant.character.escape.untitled",
                  "match": "\\."
              }
            ],
            "name": "string.nodepath.nim"
          }
        ]
      },
      "self": {
        "match": "\\bself\\b",
        "name": "variable.language.nim"
      },
      "base_expression": {
        "patterns": [
          { "include": "#strings"},
          { "include": "#multi-line-comment"},
          { "include": "#comment"},
          { "include": "#letter"},
          { "include": "#numbers"}
        ]
      },
      "compare_op": {
        "match": "<=|>=|==|<|>|!=",
        "name": "keyword.operator.comparison.nim"
      },
      "arithmetic_op": {
        "match": "[-+=*/<>@$~&%|!?^\\.:\\\\]",
        "name": "keyword.operator.arithmetic.nim"
      },
      "assignment_op": {
        "match": "=[^<>!]",
        "name": "keyword.operator.assignment.nim"
      },
      "keywords": {
        "match": "\\b(?i:addr|and|as|asm|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|div|do|elif|else|end|enum|except|export|finally|for|from|func|if|import|in|include|interface|is|isnot|iterator|let|macro|method|mixin|mod|nil|not|notin|object|of|or|out|proc|ptr|raise|ref|return|shl|shr|static|template|try|tuple|type|using|var|when|while|xor|yield)\\b",
        "name": "keyword.language.nim"
      },
      "letter": {
          "match": "\\b(?i:true|false|null)\\b",
          "name": "constant.language.nim"
      },
      "numbers": {
        "patterns": [{
            "match": "\\b(?i:0x\\h*)\\b",
            "name": "constant.numeric.integer.hexadecimal.nim"
          },
          {
            "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))\\b",
            "name": "constant.numeric.float.nim"
          },
          {
            "match": "\\b(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))\\b",
            "name": "constant.numeric.float.nim"
          },
          {
            "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))\\b",
            "name": "constant.numeric.float.nim"
          },
          {
            "match": "\\b\\d+\\b",
            "name": "constant.numeric.integer.nim"
          }
        ]
      },
      "type_declear": {
        "match": "\\:\\s*((?!addr)[a-zA-Z_][a-zA-Z_0-9]*)",
        "captures": {
          "1": { "name": "entity.name.type.nim" }
        }
      },
      "function-return-type": {
        "match": "\\)\\s*\\-\\>\\s*([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\:",
        "captures": {
          "1": { "name": "entity.name.type.class.nim" }
        }
      },
      "const_vars": {
        "match": "\\b([A-Z_0-9]+)\\b",
        "name": "constant.language.nim"
      },
      "function-declaration": {
        "name": "meta.function.nim",
        "begin": "(?x)\n  \\s*\n  \\b(proc)\\s+\n    (?=\n      [[:alpha:]_][[:word:]]* \\*?\\s* \\(\n    )\n",
        "end": "(:|(?=[#'\"\\n]))",
        "beginCaptures": {
          "1": { "name": "storage.type.function.nim" }
        },
        "endCaptures": {
          "1": { "name": "punctuation.section.function.begin.nim" }
        },
        "patterns": [
          { "include": "#function-def-name" },
          { "include": "#parameters" }
        ]
      },
      "function-def-name": {
        "patterns": [
          {
            "name": "entity.name.function.nim",
            "match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
          }
        ]
      },
      "parameters": {
        "name": "meta.function.parameters.nim",
        "begin": "(\\()",
        "end": "(\\))",
        "beginCaptures": {
          "1": { "name": "punctuation.definition.parameters.begin.nim" }
        },
        "endCaptures": {
          "1": { "name": "punctuation.definition.parameters.end.nim" }
        },
        "patterns": [{
            "name": "keyword.operator.unpacking.parameter.nim",
            "match": "(\\*\\*|\\*)"
          },
          { "include": "#parameter-special" },
          {
            "match": "(?x)\n  ([[:alpha:]_]\\w*)\n    \\s* (?: (,) | (?=[)#\\n=]))\n",
            "captures": {
              "1": { "name": "variable.parameter.function.language.nim" },
              "2": { "name": "punctuation.separator.parameters.nim" }
            }
          },
          { "include": "#comment" },
          { "include": "#loose-default"},
          { "include": "#annotated-parameter" }
        ]
      },
      "any-method": {
        "match": "\\b([A-Za-z_]\\w*)\\b(?=\\s*(?:[(]))",
        "name": "support.function.any-method.nim"
      },
      "any-property": {
        "match": "(?<=[^.]\\.)\\b([A-Za-z_]\\w*)\\b(?![(])",
        "name": "variable.other.property.nim"
      },
      "parameter-special": {
        "match": "(?x)\n  \\b ((self)|(cls)) \\b \\s*(?:(,)|(?=\\)))\n",
        "captures": {
          "1": { "name": "variable.parameter.function.language.nim" },
          "2": { "name": "variable.parameter.function.language.special.self.nim" },
          "3": { "name": "variable.parameter.function.language.special.cls.nim" },
          "4": { "name": "punctuation.separator.parameters.nim" }
        }
      },
      "loose-default": {
        "begin": "(=)",
        "end": "(,)|(?=\\))",
        "beginCaptures": {
          "1": { "name": "keyword.operator.nim" }
        },
        "endCaptures": {
          "1": { "name": "punctuation.separator.parameters.nim" }
        },
        "patterns": [
            { "include": "#base_expression"}
        ]
      },
      "annotated-parameter": {
        "begin": "(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (:)\n",
        "end": "(,)|(?=\\))",
        "beginCaptures": {
          "1": { "name": "variable.parameter.function.language.nim" },
          "2": { "name": "punctuation.separator.annotation.nim" }
        },
        "endCaptures": {
          "1": { "name": "punctuation.separator.parameters.nim" }
        },
        "patterns": [
          { "name": "keyword.operator.assignment.nim", "match": "=(?!=)"}
        ]
      },
      "pascal_case_class": {
        "captures": {
          "1": { "name": "entity.name.type.class.nim" }
        },
        "match": "\\b([A-Z][a-zA-Z_0-9]+)\\b"
      }
    }
  }
  